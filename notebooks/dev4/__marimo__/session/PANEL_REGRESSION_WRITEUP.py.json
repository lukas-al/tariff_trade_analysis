{
  "version": "1",
  "metadata": {
    "marimo_version": "0.13.15"
  },
  "cells": [
    {
      "id": "Hbol",
      "code_hash": "4eb62c4770fa20058936c1ffaffafd8a",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "MJUe",
      "code_hash": "e337fdefd47eb54e1a6ffbee4d9ab85a",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h3 id=\"code\">Code</h3></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "vblA",
      "code_hash": "763da716cf1fff95041cc238d905d864",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "bkHC",
      "code_hash": "b8cfa7c54e710261567d298918343d33",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "lEQa",
      "code_hash": "a4f0362991bf9505cd44215a1f11a4c2",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "PKri",
      "code_hash": "69f5be36f8891e831cfe658ba8eaf212",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "Xref",
      "code_hash": "c7ef004a97344266d0c7ff04b485e4be",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "SFPL",
      "code_hash": "21f136353e35c2360d6dc456e6d3bd69",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "BYtC",
      "code_hash": "9732219d355808b027d3c27391b39557",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "RGSE",
      "code_hash": "da129ffef1f768fe15bd48322fb1a677",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<marimo-ui-element object-id='RGSE-0' random-id='0ca545de-d5d8-e3eb-8d55-81ac40a27d89'><marimo-table data-initial-value='[]' data-label='null' data-data='&quot;[{&#92;&quot;year&#92;&quot;:&#92;&quot;1995&#92;&quot;,&#92;&quot;reporter_country&#92;&quot;:&#92;&quot;250&#92;&quot;,&#92;&quot;partner_country&#92;&quot;:&#92;&quot;566&#92;&quot;,&#92;&quot;product_code&#92;&quot;:&#92;&quot;850720&#92;&quot;,&#92;&quot;value&#92;&quot;:130.979,&#92;&quot;quantity&#92;&quot;:10.187,&#92;&quot;tariff_rate_pref&#92;&quot;:0.0,&#92;&quot;min_rate_pref&#92;&quot;:0.0,&#92;&quot;max_rate_pref&#92;&quot;:0.0,&#92;&quot;tariff_rate_mfn&#92;&quot;:57.51,&#92;&quot;min_rate_mfn&#92;&quot;:57.51,&#92;&quot;max_rate_mfn&#92;&quot;:57.51,&#92;&quot;average_tariff&#92;&quot;:0.0,&#92;&quot;unit_value&#92;&quot;:12.857466,&#92;&quot;value_global_trend&#92;&quot;:2.9251726,&#92;&quot;value_detrended&#92;&quot;:128.05383,&#92;&quot;quantity_global_trend&#92;&quot;:2.9251726,&#92;&quot;quantity_detrended&#92;&quot;:7.2618275,&#92;&quot;price_global_trend&#92;&quot;:2.925173,&#92;&quot;unit_value_detrended&#92;&quot;:9.932293,&#92;&quot;official_tariff&#92;&quot;:0.0,&#92;&quot;average_tariff_official&#92;&quot;:0.0,&#92;&quot;value_global_trend_right&#92;&quot;:2.9251726,&#92;&quot;quantity_global_trend_right&#92;&quot;:2.9251738,&#92;&quot;price_global_trend_right&#92;&quot;:2.9251728},{&#92;&quot;year&#92;&quot;:&#92;&quot;1995&#92;&quot;,&#92;&quot;reporter_country&#92;&quot;:&#92;&quot;250&#92;&quot;,&#92;&quot;partner_country&#92;&quot;:&#92;&quot;608&#92;&quot;,&#92;&quot;product_code&#92;&quot;:&#92;&quot;620193&#92;&quot;,&#92;&quot;value&#92;&quot;:83.441,&#92;&quot;quantity&#92;&quot;:0.699,&#92;&quot;tariff_rate_pref&#92;&quot;:11.7,&#92;&quot;min_rate_pref&#92;&quot;:11.7,&#92;&quot;max_rate_pref&#92;&quot;:11.7,&#92;&quot;tariff_rate_mfn&#92;&quot;:null,&#92;&quot;min_rate_mfn&#92;&quot;:null,&#92;&quot;max_rate_mfn&#92;&quot;:null,&#92;&quot;average_tariff&#92;&quot;:11.7,&#92;&quot;unit_value&#92;&quot;:119.37196,&#92;&quot;value_global_trend&#92;&quot;:22.93542,&#92;&quot;value_detrended&#92;&quot;:60.505585,&#92;&quot;quantity_global_trend&#92;&quot;:22.935429,&#92;&quot;quantity_detrended&#92;&quot;:-22.23643,&#92;&quot;price_global_trend&#92;&quot;:22.935429,&#92;&quot;unit_value_detrended&#92;&quot;:96.43654,&#92;&quot;official_tariff&#92;&quot;:0.0,&#92;&quot;average_tariff_official&#92;&quot;:11.7,&#92;&quot;value_global_trend_right&#92;&quot;:22.935425,&#92;&quot;quantity_global_trend_right&#92;&quot;:22.935425,&#92;&quot;price_global_trend_right&#92;&quot;:22.935425},{&#92;&quot;year&#92;&quot;:&#92;&quot;1995&#92;&quot;,&#92;&quot;reporter_country&#92;&quot;:&#92;&quot;276&#92;&quot;,&#92;&quot;partner_country&#92;&quot;:&#92;&quot;686&#92;&quot;,&#92;&quot;product_code&#92;&quot;:&#92;&quot;300490&#92;&quot;,&#92;&quot;value&#92;&quot;:22.0,&#92;&quot;quantity&#92;&quot;:1.2,&#92;&quot;tariff_rate_pref&#92;&quot;:0.0,&#92;&quot;min_rate_pref&#92;&quot;:0.0,&#92;&quot;max_rate_pref&#92;&quot;:0.0,&#92;&quot;tariff_rate_mfn&#92;&quot;:null,&#92;&quot;min_rate_mfn&#92;&quot;:null,&#92;&quot;max_rate_mfn&#92;&quot;:null,&#92;&quot;average_tariff&#92;&quot;:0.0,&#92;&quot;unit_value&#92;&quot;:18.333332,&#92;&quot;value_global_trend&#92;&quot;:41.930824,&#92;&quot;value_detrended&#92;&quot;:-19.930824,&#92;&quot;quantity_global_trend&#92;&quot;:41.930832,&#92;&quot;quantity_detrended&#92;&quot;:-40.73083,&#92;&quot;price_global_trend&#92;&quot;:41.930824,&#92;&quot;unit_value_detrended&#92;&quot;:-23.597492,&#92;&quot;official_tariff&#92;&quot;:0.0,&#92;&quot;average_tariff_official&#92;&quot;:0.0,&#92;&quot;value_global_trend_right&#92;&quot;:41.930836,&#92;&quot;quantity_global_trend_right&#92;&quot;:41.93083,&#92;&quot;price_global_trend_right&#92;&quot;:41.93083},{&#92;&quot;year&#92;&quot;:&#92;&quot;1995&#92;&quot;,&#92;&quot;reporter_country&#92;&quot;:&#92;&quot;250&#92;&quot;,&#92;&quot;partner_country&#92;&quot;:&#92;&quot;392&#92;&quot;,&#92;&quot;product_code&#92;&quot;:&#92;&quot;400610&#92;&quot;,&#92;&quot;value&#92;&quot;:1.604,&#92;&quot;quantity&#92;&quot;:0.097,&#92;&quot;tariff_rate_pref&#92;&quot;:null,&#92;&quot;min_rate_pref&#92;&quot;:null,&#92;&quot;max_rate_pref&#92;&quot;:null,&#92;&quot;tariff_rate_mfn&#92;&quot;:3.9,&#92;&quot;min_rate_mfn&#92;&quot;:3.9,&#92;&quot;max_rate_mfn&#92;&quot;:3.9,&#92;&quot;average_tariff&#92;&quot;:3.9,&#92;&quot;unit_value&#92;&quot;:16.536081,&#92;&quot;value_global_trend&#92;&quot;:2.6971912,&#92;&quot;value_detrended&#92;&quot;:-1.0931913,&#92;&quot;quantity_global_trend&#92;&quot;:2.6971905,&#92;&quot;quantity_detrended&#92;&quot;:-2.6001906,&#92;&quot;price_global_trend&#92;&quot;:2.6971898,&#92;&quot;unit_value_detrended&#92;&quot;:13.838892,&#92;&quot;official_tariff&#92;&quot;:0.0,&#92;&quot;average_tariff_official&#92;&quot;:3.9,&#92;&quot;value_global_trend_right&#92;&quot;:2.6971903,&#92;&quot;quantity_global_trend_right&#92;&quot;:2.69719,&#92;&quot;price_global_trend_right&#92;&quot;:2.6971903},{&#92;&quot;year&#92;&quot;:&#92;&quot;1995&#92;&quot;,&#92;&quot;reporter_country&#92;&quot;:&#92;&quot;250&#92;&quot;,&#92;&quot;partner_country&#92;&quot;:&#92;&quot;446&#92;&quot;,&#92;&quot;product_code&#92;&quot;:&#92;&quot;880330&#92;&quot;,&#92;&quot;value&#92;&quot;:155.45,&#92;&quot;quantity&#92;&quot;:0.419,&#92;&quot;tariff_rate_pref&#92;&quot;:0.0,&#92;&quot;min_rate_pref&#92;&quot;:0.0,&#92;&quot;max_rate_pref&#92;&quot;:0.0,&#92;&quot;tariff_rate_mfn&#92;&quot;:null,&#92;&quot;min_rate_mfn&#92;&quot;:null,&#92;&quot;max_rate_mfn&#92;&quot;:null,&#92;&quot;average_tariff&#92;&quot;:0.0,&#92;&quot;unit_value&#92;&quot;:371.00238,&#92;&quot;value_global_trend&#92;&quot;:495.34372,&#92;&quot;value_detrended&#92;&quot;:-339.89374,&#92;&quot;quantity_global_trend&#92;&quot;:495.34378,&#92;&quot;quantity_detrended&#92;&quot;:-494.92477,&#92;&quot;price_global_trend&#92;&quot;:495.34384,&#92;&quot;unit_value_detrended&#92;&quot;:-124.34146,&#92;&quot;official_tariff&#92;&quot;:0.0,&#92;&quot;average_tariff_official&#92;&quot;:0.0,&#92;&quot;value_global_trend_right&#92;&quot;:495.34366,&#92;&quot;quantity_global_trend_right&#92;&quot;:495.34378,&#92;&quot;price_global_trend_right&#92;&quot;:495.34378}]&quot;' data-total-rows='5' data-total-columns='25' data-max-columns='50' data-banner-text='&quot;&quot;' data-pagination='true' data-page-size='10' data-field-types='[[&quot;year&quot;, [&quot;string&quot;, &quot;str&quot;]], [&quot;reporter_country&quot;, [&quot;string&quot;, &quot;str&quot;]], [&quot;partner_country&quot;, [&quot;string&quot;, &quot;str&quot;]], [&quot;product_code&quot;, [&quot;string&quot;, &quot;str&quot;]], [&quot;value&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;quantity&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;tariff_rate_pref&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;min_rate_pref&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;max_rate_pref&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;tariff_rate_mfn&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;min_rate_mfn&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;max_rate_mfn&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;average_tariff&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;unit_value&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;value_global_trend&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;value_detrended&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;quantity_global_trend&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;quantity_detrended&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;price_global_trend&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;unit_value_detrended&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;official_tariff&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;average_tariff_official&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;value_global_trend_right&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;quantity_global_trend_right&quot;, [&quot;number&quot;, &quot;f32&quot;]], [&quot;price_global_trend_right&quot;, [&quot;number&quot;, &quot;f32&quot;]]]' data-show-filters='true' data-show-download='true' data-show-column-summaries='false' data-row-headers='[]' data-has-stable-row-id='false' data-lazy='false' data-preload='false'></marimo-table></marimo-ui-element>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "Kclp",
      "code_hash": "575100dde130d2f4711a0c8a261f7223",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "--- Cleaning data ---\nExcluding product codes starting with: ['720610', '720690', '720711', '720712', '720719', '720720', '720810', '720825', '720826', '720827', '720836', '720837', '720838', '720839', '720840', '720851', '720852', '720853', '720854', '720890', '720915', '720916', '720917', '720918', '720925', '720926', '720927', '720928', '720990', '721011', '721012', '721020', '721030', '721041', '721049', '721050', '721061', '721069', '721070', '721090', '721113', '721114', '721119', '721123', '721129', '721190', '721210', '721220', '721230', '721240', '721250', '721260', '721310', '721320', '721391', '721399', '721410', '721420', '721430', '721491', '721499', '721510', '721550', '721590', '721610', '721621', '721622', '721631', '721632', '721633', '721640', '721650', '721699', '721710', '721720', '721730', '721790', '721810', '721891', '721899', '721911', '721912', '721913', '721914', '721921', '721922', '721923', '721924', '721931', '721932', '721933', '721934', '721935', '721990', '722011', '722012', '722020', '722090', '722100', '722211', '722219', '722220', '722230', '722240', '722300', '722410', '722490', '722511', '722519', '722530', '722540', '722550', '722591', '722592', '722599', '722611', '722619', '722620', '722691', '722692', '722699', '722710', '722720', '722790', '722810', '722820', '722830', '722840', '722850', '722860', '722870', '722880', '722920', '722990', '730110', '730210', '730240', '730290', '730411', '730419', '730422', '730423', '730424', '730429', '730431', '730439', '730441', '730449', '730451', '730459', '730490', '730511', '730512', '730519', '730520', '730531', '730539', '730590', '730611', '730619', '730621', '730629', '730630', '730640', '730650', '730661', '730669', '730690', '760110', '760120', '760410', '760421', '760429', '760511', '760519', '760521', '760529', '760611', '760612', '760691', '760692', '760711', '760719', '760720', '760810', '760820', '760900']\n--- Filtering out oil countries ---\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Final sample includes 38 countries.\n"
        }
      ]
    },
    {
      "id": "emfo",
      "code_hash": "7e51c98a3b5d7940b8be79ec6e66f36e",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h1 id=\"indirect-effects-of-trade-war-1-on-the-uk\">Indirect effects of Trade war 1 on the UK</h1>\n<span class=\"paragraph\">This notebook explores the effects of the 2018 US-China trade war on UK imports from China. We attempt to find evidence for the existence of dumping, and to extrapolate this evidence to identify an implied effect over trade war 2.</span>\n<h2 id=\"rationalle\">Rationalle</h2>\n<span class=\"paragraph\">We are essentially trying to connect UK imports from China, to the application of tariffs by the US on Chinese goods in the 2018 trade war. We are attempting to determine if there is a causal link as follows:</span>\n<ol>\n<li>The US tariffs Chinese goods.</li>\n<li>In response to a) the increased effective price for US importers &amp; consumers; b) other political pressures, the US demand for Chinese goods falls.</li>\n<li>Chinese exporters respond by reducing their price and identifying new trading relationships with other countries, including the UK.</li>\n<li>This results in an increased volume of Chinese goods, at a lower export price, being sent to the UK. This is called 'dumping'.</li>\n</ol>\n<h2 id=\"data\">Data</h2>\n<span class=\"paragraph\">To answer this question, we construct the following dataset:</span>\n<ol>\n<li>Trade values (USD), and trade volumes (SI unit), for bilateral trade between all countries in the world, annually. At the HS6 product level (some 5000 unique product codes). This data is sourced from <a href=\"https://www.cepii.fr/CEPII/en/bdd_modele/bdd_modele_item.asp?id=37\" rel=\"noopener\" target=\"_blank\">CEPII</a>, where they describe it as such:<blockquote>\n<span class=\"paragraph\">BACI provides data on bilateral trade flows for 200 countries at the product level (5000 products). Products correspond to the \"Harmonized System\" nomenclature (6 digit code).</span>\n</blockquote>\n</li>\n<li>The simple average (required as tariffs are often applied at the hs10 level) ad-valorem equivalent tariffs for each of the ~5000 products, through time and for each bilateral trading pair, resulting from both preferential agreements and on a most-favoured nation basis. This is sourced from the <a href=\"https://wits.worldbank.org/\" rel=\"noopener\" target=\"_blank\">WITS tariff database</a>, produced by the World Bank.</li>\n<li>Specific 'exceptional' tariffs introduced by the US administration during the 2018 US-China trade war. These are sourced from replication materials for <a href=\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=5101245\" rel=\"noopener\" target=\"_blank\">this paper</a> by Trang T. Hoang and Carter Mix at the Federal Reserve Board. We validate these against <a href=\"https://ustr.gov/issue-areas/enforcement/section-301-investigations\" rel=\"noopener\" target=\"_blank\">the US Trade Representative's website</a>.</li>\n</ol></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "Hstk",
      "code_hash": "baa44f809a52ea187c7410437cd98433",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h2 id=\"methodology\">Methodology</h2></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "nWHF",
      "code_hash": "362066ba073a828a4becc2303b23214a",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h3 id=\"approach-1\">Approach 1</h3>\n<span class=\"paragraph\">To approach this question, we employ a causal inference assessment. We construct a panel of bilateral trade between a range of countries, where the treatement is the application of tariffs by the US on China of a specific good. Our observed outcome variable is a) the volume; b) the value; c) the unit value; of exports from China to the UK. </span>\n<span class=\"paragraph\">We are interested in the effect of the tariffs on UK imports, but include all global bilateral trade from the rest of the world as well. This means we implicitly construct control groups across two dimensions: a) imports of those products tariffed by the US from countries other than China which were not tariffed; b) imports from China of products which were not tariffed.</span>\n<span class=\"paragraph\">We remove Steel and Aluminium products from the sample, as in Hoang-Mix, to control for confounders associated with the broad-based application of tariffs to all countries by the USA. </span>\n<span class=\"paragraph\">Relatedly, we employ fixed effects (more flexible dummy variables) to control for variation between our treatment and non-treatment groups as well as confounding effects. Replicating an existing specification, we control for a) variation across time within exporter and specific product; b) variation across time within importer and product; c) variation between importer-exporter pair. This specification is important to get right. Some causal inference theory:</span>\n<blockquote>\n<span class=\"paragraph\">If we condition on a common/descendent/mediating effects (e.g. fluctuations in price of goods) of the treatment (tariff application by the US), we cause selection bias, reducing the power of our test to detect the impact of the treatment on the observed outcome variable (UK imports from China).</span>\n</blockquote></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "iLit",
      "code_hash": "5688a986783099a3d5da8183291892f7",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h4 id=\"specification\">Specification</h4>\n<span class=\"paragraph\">We fit an OLS fixed effect panel regression, using the <a href=\"https://github.com/py-econometrics/pyfixest\" rel=\"noopener\" target=\"_blank\">pyfixest</a> package. </span>\n<span class=\"paragraph\">Adapting the equation defined in Section 3.1 of <a href=\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=5101245\" rel=\"noopener\" target=\"_blank\">Mix-Huang, 2025</a>, we specify the following model:</span>\n<marimo-tex class=\"arithmatex\">||[\n\\begin{align*}\nL_{i,j,p,t} &amp;= \\beta \\cdot \\left( \\mathbb{I}(i = \\mathrm{UK}) \\cdot \\mathbb{I}(j = \\mathrm{China}) \\cdot \\mathbb{I}(t \\in [2017,2024]) \\cdot \\mathrm{Tariff}_{p,t}^{\\mathrm{US-China}} \\right) \\\\\n&amp;\\quad + \\alpha_{j,p,t} + \\lambda_{i,j} + \\varepsilon_{i,j,p,t}\n\\end{align*}\n||]</marimo-tex><span class=\"paragraph\">Where the notation is defined as follows:</span>\n<ul>\n<li><marimo-tex class=\"arithmatex\">||(L_{i,j,p,t}||)</marimo-tex>: Represents the dependent variable, specifically <marimo-tex class=\"arithmatex\">||(L_{i,j,p,t} = \\log(\\mathrm{Value}_{i,j,p,t})||)</marimo-tex>.<ul>\n<li><marimo-tex class=\"arithmatex\">||(\\mathrm{Value}_{i,j,p,t}||)</marimo-tex>: The underlying traded value/volume/price of interest for the observation.</li>\n</ul>\n</li>\n<li>Indices:<ul>\n<li><marimo-tex class=\"arithmatex\">||(i||)</marimo-tex>: Represents the importer.</li>\n<li><marimo-tex class=\"arithmatex\">||(j||)</marimo-tex>: Represents the exporter.</li>\n<li><marimo-tex class=\"arithmatex\">||(p||)</marimo-tex>: Represents the product code.</li>\n<li><marimo-tex class=\"arithmatex\">||(t||)</marimo-tex>: Represents the year.</li>\n</ul>\n</li>\n<li><marimo-tex class=\"arithmatex\">||(\\beta||)</marimo-tex>: The coefficient of interest, quantifying the impact of the main regressor term.</li>\n<li><marimo-tex class=\"arithmatex\">||(\\mathbb{I}(\\cdot)||)</marimo-tex>: The indicator function, which equals 1 if the condition in the parenthesis is true, and 0 otherwise.<ul>\n<li><marimo-tex class=\"arithmatex\">||(\\mathbb{I}(i = \\mathrm{UK})||)</marimo-tex>: Equals 1 if the importer <marimo-tex class=\"arithmatex\">||(i||)</marimo-tex> is the United Kingdom, 0 otherwise.</li>\n<li><marimo-tex class=\"arithmatex\">||(\\mathbb{I}(j = \\mathrm{China})||)</marimo-tex>: Equals 1 if the exporter <marimo-tex class=\"arithmatex\">||(j||)</marimo-tex> is China, 0 otherwise.</li>\n<li><marimo-tex class=\"arithmatex\">||(\\mathbb{I}(t \\in [2017,2024])||)</marimo-tex>: Equals 1 if the year <marimo-tex class=\"arithmatex\">||(t||)</marimo-tex> falls within the range of 2017 to 2024 (inclusive), 0 otherwise.</li>\n</ul>\n</li>\n<li><marimo-tex class=\"arithmatex\">||(\\mathrm{Tariff}_{p,t}^{\\mathrm{US-China}}||)</marimo-tex>: The average official tariff rate between the US and China for product code <marimo-tex class=\"arithmatex\">||(p||)</marimo-tex> in year <marimo-tex class=\"arithmatex\">||(t||)</marimo-tex>.</li>\n<li>Fixed Effects: These terms control for unobserved heterogeneity between groups, including various sources of bias due to differences between our treated and untreated groups. They work by essentially de-meaning within a specific group, leaving only heterogeneity within that group.<ul>\n<li><marimo-tex class=\"arithmatex\">||(\\alpha_{j,p,t}||)</marimo-tex>: Represents importer-product-year fixed effects, controlling for any unobserved factors specific to each combination of an exporter <marimo-tex class=\"arithmatex\">||(i||)</marimo-tex>, product code <marimo-tex class=\"arithmatex\">||(p||)</marimo-tex>, and year <marimo-tex class=\"arithmatex\">||(t||)</marimo-tex>. </li>\n<li><marimo-tex class=\"arithmatex\">||(\\lambda_{i,j}||)</marimo-tex>: Represents importer-exporter fixed effects, controlling for unobserved factors specific to each pair of an importer <marimo-tex class=\"arithmatex\">||(i||)</marimo-tex> and exporter <marimo-tex class=\"arithmatex\">||(j||)</marimo-tex>.\n<!-- * <marimo-tex class=\"arithmatex\">||(\\omega_{j,p,t}||)</marimo-tex>: Represents exporter-product-year fixed effects, controlling for unobserved factors specific to each combination of an exporter <marimo-tex class=\"arithmatex\">||(j||)</marimo-tex>, product code <marimo-tex class=\"arithmatex\">||(p||)</marimo-tex>, and year <marimo-tex class=\"arithmatex\">||(t||)</marimo-tex>. --></li>\n</ul>\n</li>\n<li><marimo-tex class=\"arithmatex\">||(\\varepsilon_{i,j,p,t}||)</marimo-tex>: The idiosyncratic error term for importer <marimo-tex class=\"arithmatex\">||(i||)</marimo-tex>, exporter <marimo-tex class=\"arithmatex\">||(j||)</marimo-tex>, product <marimo-tex class=\"arithmatex\">||(p||)</marimo-tex>, and year <marimo-tex class=\"arithmatex\">||(t||)</marimo-tex>. It captures all other unobserved factors not accounted for by the regressors or fixed effects.</li>\n</ul>\n<span class=\"paragraph\">Following similar examples in the literature, we use unclustered heteroskedasticity-robust standard errors (Eicker-Huber-White).</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "ZHCJ",
      "code_hash": "4d496593d152d303796becab5214f9ee",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h4 id=\"interpretation\">Interpretation</h4>\n<span class=\"paragraph\">Interpreting this model, the coefficient <marimo-tex class=\"arithmatex\">||(\\beta||)</marimo-tex> quantifies the estimated percentage change in the specific metric used for <marimo-tex class=\"arithmatex\">||(\\log(\\mathrm{Value}_{i,j,p,t})||)</marimo-tex> (i.e., import value, quantity, or price) for UK imports from China in response to a one percentage point increase in the <marimo-tex class=\"arithmatex\">||(\\mathrm{Tariff}_{p,t}^{\\mathrm{US-China}}||)</marimo-tex>.</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "ROlb",
      "code_hash": "00344fb64cc3652a8854d30a03331d30",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h3 id=\"extensions-and-alternate-specifications\">Extensions and alternate specifications</h3>\n<span class=\"paragraph\">Based on this foundation, we vary the specification to test our results for robustness, vary the question being answered, compare against literature, etc. Dimensions which we perform this variation across are:</span>\n<ul>\n<li>Varying control groups (range &amp; breadth of the sample)</li>\n<li>Removing specific product lines with global tariffs applied</li>\n<li>Varying fixed effects</li>\n<li>RoW, US, and UK as the importer </li>\n<li>Varying the measurement period of the effect (various baseline years)</li>\n<li>Placebo tests (TBD)</li>\n<li>Clustering standard errors with varying specifications</li>\n</ul>\n<span class=\"paragraph\">A range of alternate specifications for all models is contained in APPENDIX [X]</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "qnkX",
      "code_hash": "104517b59def27683b2bc463ebaf4e89",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h2 id=\"further-considerations\">Further Considerations</h2>\n<span class=\"paragraph\">It is important to note that the policy response of individual countries, such as the UK, to the US tariffs on China is embedded within our data (i.e. endogenous). For example, the UK implemented industry-specific subsidies alongside various import restrictions. Third countries exhibited a wide-ranging willingness to absorb exports from China in the 2018 trade war. See <a href=\"https://cepr.org/voxeu/columns/redirecting-chinese-exports-us-evidence-trade-deflection-first-us-china-trade-war\" rel=\"noopener\" target=\"_blank\">this paper for more</a>.</span>\n<blockquote>\n<span class=\"paragraph\"><em>\"There is huge variation across importing nations in the scale of Chinese trade deflection and in their appetite for absorbing extra imports without taking defensive action.\"</em></span>\n</blockquote></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "TqIu",
      "code_hash": "a4e2b5fae8de11cd4ee0420bffc7e489",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h1 id=\"results\">Results</h1>\n<span class=\"paragraph\">Summarising - we do not identify a clear case of trade diversion from China to the UK, particularly as compared to the rest of the world, as a result of the 2018 US-China trade war.</span>\n<span class=\"paragraph\">More specifically - we do not find evidence to reject the hypothesis, that over 2018, 2019, and 2020 there was a significant difference from 0 for the aggregate cross-elasticity of UK imports from China of specific goods to US tariffs on those goods. If there is any effect it, it is small and hidden at the aggregate level.</span>\n<span class=\"paragraph\"><em><strong>UPDATE THIS SECTION</strong></em></span>\n<span class=\"paragraph\">The rest of this section is structured as follows:</span>\n<ol>\n<li>First, we identify the impact on US imports from China of the US tariffs.</li>\n<li>Second, we compare this against the impact on the RoW - a select basket of countries. These first two sections serve to assess the efficacy of our methodology against commonly-held priors.</li>\n<li>Third, we look at the impact on UK imports of Chinese goods of the US tariffs.</li>\n<li>Fourth, we examine countries which exhibited significant trade diversion</li>\n<li>Fifth, we examine how correlated this is to the endogenous protectionist policy response by the relevant country</li>\n<li>Finally, we conclude as to what we can apply from this to the current trade war, discussing limitations and conditioning on the policy response.</li>\n</ol></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "Vxnm",
      "code_hash": "4d3c5729bdca7a7997811319b0448b5c",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h2 id=\"the-impact-on-us-imports-from-china-of-the-us-tariffs\">The impact on US imports from China of the US tariffs.</h2>\n<span class=\"paragraph\">We construct three regressions, each targeting a different dependent variable - Total bilateral trade value in USD, total quantity in SI units, and a unit value price constructed by dividing the total value by total quantity.</span>\n<span class=\"paragraph\">Turning first to total traded value...</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "DnEU",
      "code_hash": "7646696074d2b45540e8f7a918398ac7",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "'plotly_mimetype+notebook'",
          "traceback": []
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "Formula for model:\nlog(value) ~ USA_from_China_2017 + USA_from_China_2018 + USA_from_China_2019 + USA_from_China_2020 + USA_from_China_2021 + USA_from_China_2022 + USA_from_China_2023 | importer^year^product_code + importer^exporter\nChecking for nulls in dependent variable 'value' and 'tariff_us_china'.\n"
        }
      ]
    },
    {
      "id": "ulZA",
      "code_hash": "f18c8f43138f32ab5881486dd3d8ea03",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><span class=\"paragraph\">As expected, the coefficient on the interaction term is negative, indicating that US imports from China of the tariffed goods fell in response to the tariffs. The estimated (partial) elasticity is around -0.009 in 2019, the first year following the tariffs suggesting a 1% increase in the tariff rate leads to a circa 0.9% decrease in US imports from China of those goods.</span>\n<span class=\"paragraph\">This is aligned with our priors, and with various comparable literature [CITE CITE CITE].</span>\n<span class=\"paragraph\">We see significant changes in the value of our estimated parameter over the years subsequent to 2019. We might expect a sustained monotonic reduction in the value of the coefficient, as supply chains continue to disentangle. </span>\n<span class=\"paragraph\">However, and as we will observe below, the magnitude of the shift and its consistency across countries suggests that the fixed effects may not be fully absorbing the effects of COVID, where supply chains globally and particularly from China were significantly affected. We therefore treat results from 2020 onwards with caution. Section [X] outlines some approaches we take to mitigate the impact of COVID [???].</span>\n<span class=\"paragraph\">Next, looking at the quantity traded, in dimensioned units (which we aggregate over).</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "ecfG",
      "code_hash": "ef7948252579846302ebb1a216289d67",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "'plotly_mimetype+notebook'",
          "traceback": []
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "Formula for model:\nlog(quantity) ~ USA_from_China_2017 + USA_from_China_2018 + USA_from_China_2019 + USA_from_China_2020 + USA_from_China_2021 + USA_from_China_2022 + USA_from_China_2023 | importer^year^product_code + importer^exporter\nChecking for nulls in dependent variable 'quantity' and 'tariff_us_china'.\n"
        },
        {
          "type": "stream",
          "name": "stderr",
          "text": "<span class=\"codehilite\"><div class=\"highlight\"><pre><span></span><span class=\"gt\">Traceback (most recent call last):</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/marimo/_runtime/executor.py&quot;</span>, line <span class=\"m\">139</span>, in <span class=\"n\">execute_cell</span>\n<span class=\"w\">    </span><span class=\"k\">return</span> <span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">last_expr</span><span class=\"p\">,</span> <span class=\"n\">glbls</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/var/folders/df/j998nyn11sdf0w5cf48pny6m0000gn/T/marimo_52098/__marimo__cell_ecfG_.py&quot;</span>, line <span class=\"m\">26</span>, in <span class=\"n\">&lt;module&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"pm\">~^^</span>\n  File <span class=\"nb\">&quot;/var/folders/df/j998nyn11sdf0w5cf48pny6m0000gn/T/marimo_52098/__marimo__cell_ecfG_.py&quot;</span>, line <span class=\"m\">24</span>, in <span class=\"n\">_cell_ecfG_</span>\n<span class=\"w\">    </span><span class=\"k\">return</span> <span class=\"n\">mo</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">([</span><span class=\"n\">etable</span><span class=\"p\">,</span> <span class=\"n\">plot</span><span class=\"p\">,</span> <span class=\"n\">fig_elasticity</span><span class=\"p\">])</span>\n<span class=\"w\">           </span><span class=\"pm\">~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/marimo/_plugins/stateless/flex.py&quot;</span>, line <span class=\"m\">124</span>, in <span class=\"n\">vstack</span>\n<span class=\"w\">    </span><span class=\"k\">return</span> <span class=\"n\">_flex</span><span class=\"p\">(</span>\n<span class=\"w\">    </span>    <span class=\"n\">items</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">...&lt;</span><span class=\"mi\">7</span> <span class=\"n\">lines</span><span class=\"o\">&gt;...</span>\n<span class=\"w\">    </span>    <span class=\"k\">else</span> <span class=\"n\">heights</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/marimo/_plugins/stateless/flex.py&quot;</span>, line <span class=\"m\">64</span>, in <span class=\"n\">_flex</span>\n<span class=\"w\">    </span><span class=\"n\">grid_items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">as_html</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">]</span>\n<span class=\"w\">                  </span><span class=\"pm\">~~~~~~~^^^^^^</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/marimo/_output/formatting.py&quot;</span>, line <span class=\"m\">277</span>, in <span class=\"n\">as_html</span>\n<span class=\"w\">    </span><span class=\"n\">mimetype</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">formatter</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"w\">                     </span><span class=\"pm\">~~~~~~~~~^^^^^^^</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/marimo/_output/formatters/plotly_formatters.py&quot;</span>, line <span class=\"m\">40</span>, in <span class=\"n\">_show_plotly_figure</span>\n<span class=\"w\">    </span><span class=\"n\">plugin</span> <span class=\"o\">=</span> <span class=\"n\">PlotlyFormatter</span><span class=\"o\">.</span><span class=\"n\">render_plotly_dict</span><span class=\"p\">(</span>\n<span class=\"w\">    </span>    <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">json_str</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/marimo/_output/formatters/plotly_formatters.py&quot;</span>, line <span class=\"m\">69</span>, in <span class=\"n\">render_plotly_dict</span>\n<span class=\"w\">    </span><span class=\"n\">default_renderer</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"n\">pio</span><span class=\"o\">.</span><span class=\"n\">renderers</span><span class=\"p\">[</span><span class=\"n\">pio</span><span class=\"o\">.</span><span class=\"n\">renderers</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">]</span>\n<span class=\"w\">                            </span><span class=\"pm\">~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/plotly/io/_renderers.py&quot;</span>, line <span class=\"m\">93</span>, in <span class=\"n\">__getitem__</span>\n<span class=\"w\">    </span><span class=\"n\">renderer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_renderers</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span>\n<span class=\"w\">               </span><span class=\"pm\">~~~~~~~~~~~~~~~^^^^^^</span>\n<span class=\"gr\">KeyError</span>: <span class=\"n\">&#39;plotly_mimetype+notebook&#39;</span>\n</pre></div>\n</span>"
        }
      ]
    },
    {
      "id": "Pvdt",
      "code_hash": "0863646b6790fb7ebaf731166fccf2f8",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><span class=\"paragraph\">The effect on total traded quantities is similar to that on total traded value.</span>\n<span class=\"paragraph\">Turning next to price, or unit value.</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "ZBYS",
      "code_hash": "009c3c503a7af534799d00768833f157",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "Formula for model:\nlog(unit_value) ~ USA_from_China_2017 + USA_from_China_2018 + USA_from_China_2019 + USA_from_China_2020 + USA_from_China_2021 + USA_from_China_2022 + USA_from_China_2023 | importer^year^product_code + importer^exporter\nChecking for nulls in dependent variable 'unit_value' and 'tariff_us_china'.\n"
        },
        {
          "type": "stream",
          "name": "stderr",
          "text": "<span class=\"codehilite\"><div class=\"highlight\"><pre><span></span><span class=\"gt\">Traceback (most recent call last):</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/marimo/_runtime/executor.py&quot;</span>, line <span class=\"m\">139</span>, in <span class=\"n\">execute_cell</span>\n<span class=\"w\">    </span><span class=\"k\">return</span> <span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">last_expr</span><span class=\"p\">,</span> <span class=\"n\">glbls</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/var/folders/df/j998nyn11sdf0w5cf48pny6m0000gn/T/marimo_52098/__marimo__cell_ZBYS_.py&quot;</span>, line <span class=\"m\">26</span>, in <span class=\"n\">&lt;module&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"pm\">~^^</span>\n  File <span class=\"nb\">&quot;/var/folders/df/j998nyn11sdf0w5cf48pny6m0000gn/T/marimo_52098/__marimo__cell_ZBYS_.py&quot;</span>, line <span class=\"m\">12</span>, in <span class=\"n\">_cell_ZBYS_</span>\n<span class=\"w\">    </span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">etable</span><span class=\"p\">,</span> <span class=\"n\">plot</span> <span class=\"o\">=</span> <span class=\"n\">run_direct_effect_regression</span><span class=\"p\">(</span>\n<span class=\"w\">                          </span><span class=\"pm\">~~~~~~~~~~~~~~~~~~~~~~~~~~~~^</span>\n<span class=\"w\">    </span>    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">analysis_lf</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"pm\">^^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">    </span><span class=\"o\">...&lt;</span><span class=\"mi\">4</span> <span class=\"n\">lines</span><span class=\"o\">&gt;...</span>\n<span class=\"w\">    </span>    <span class=\"n\">formula</span><span class=\"o\">=</span><span class=\"n\">formula</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"pm\">^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"pm\">^</span>\n  File <span class=\"nb\">&quot;/var/folders/df/j998nyn11sdf0w5cf48pny6m0000gn/T/marimo_52098/__marimo__cell_vblA_.py&quot;</span>, line <span class=\"m\">74</span>, in <span class=\"n\">run_direct_effect_regression</span>\n<span class=\"w\">    </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">pyfixest</span><span class=\"o\">.</span><span class=\"n\">feols</span><span class=\"p\">(</span><span class=\"n\">fml</span><span class=\"o\">=</span><span class=\"n\">formula</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">clean_df</span><span class=\"p\">,</span> <span class=\"n\">vcov</span><span class=\"o\">=</span><span class=\"n\">vcov</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/pyfixest/estimation/estimation.py&quot;</span>, line <span class=\"m\">489</span>, in <span class=\"n\">feols</span>\n<span class=\"w\">    </span><span class=\"n\">fixest</span><span class=\"o\">.</span><span class=\"n\">_estimate_all_models</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"pm\">~~~~~~~~~~~~~~~~~~~~~~~~~~~^</span>\n<span class=\"w\">    </span>    <span class=\"n\">vcov</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"pm\">^^^^^</span>\n<span class=\"w\">    </span><span class=\"o\">...&lt;</span><span class=\"mi\">2</span> <span class=\"n\">lines</span><span class=\"o\">&gt;...</span>\n<span class=\"w\">    </span>    <span class=\"n\">demeaner_backend</span><span class=\"o\">=</span><span class=\"n\">demeaner_backend</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"pm\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"pm\">^</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/pyfixest/estimation/FixestMulti_.py&quot;</span>, line <span class=\"m\">355</span>, in <span class=\"n\">_estimate_all_models</span>\n<span class=\"w\">    </span><span class=\"n\">FIT</span><span class=\"o\">.</span><span class=\"n\">prepare_model_matrix</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"pm\">~~~~~~~~~~~~~~~~~~~~~~~~^^</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/pyfixest/estimation/feols_.py&quot;</span>, line <span class=\"m\">362</span>, in <span class=\"n\">prepare_model_matrix</span>\n<span class=\"w\">    </span><span class=\"n\">mm_dict</span> <span class=\"o\">=</span> <span class=\"n\">model_matrix_fixest</span><span class=\"p\">(</span>\n<span class=\"w\">    </span>    <span class=\"n\">FixestFormula</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">FixestFormula</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">...&lt;</span><span class=\"mi\">4</span> <span class=\"n\">lines</span><span class=\"o\">&gt;...</span>\n<span class=\"w\">    </span>    <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_context</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/pyfixest/estimation/model_matrix_fixest_.py&quot;</span>, line <span class=\"m\">120</span>, in <span class=\"n\">model_matrix_fixest</span>\n<span class=\"w\">    </span><span class=\"n\">fval</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">_fixef_interactions</span><span class=\"p\">(</span><span class=\"n\">fval</span><span class=\"o\">=</span><span class=\"n\">fval</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"w\">                 </span><span class=\"pm\">~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/pyfixest/estimation/model_matrix_fixest_.py&quot;</span>, line <span class=\"m\">321</span>, in <span class=\"n\">_fixef_interactions</span>\n<span class=\"w\">    </span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"nb\">vars</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]]</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">StringDtype</span><span class=\"p\">()),</span>\n<span class=\"w\">    </span><span class=\"pm\">~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/pandas/core/generic.py&quot;</span>, line <span class=\"m\">6657</span>, in <span class=\"n\">astype</span>\n<span class=\"w\">    </span><span class=\"n\">ser</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">dtype</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"o\">=</span><span class=\"n\">copy</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"n\">errors</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">ser</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"pm\">~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/pandas/core/generic.py&quot;</span>, line <span class=\"m\">6662</span>, in <span class=\"n\">astype</span>\n<span class=\"w\">    </span><span class=\"n\">new_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mgr</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">dtype</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"o\">=</span><span class=\"n\">copy</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"n\">errors</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/pandas/core/internals/managers.py&quot;</span>, line <span class=\"m\">430</span>, in <span class=\"n\">astype</span>\n<span class=\"w\">    </span><span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span>\n<span class=\"w\">           </span><span class=\"pm\">~~~~~~~~~~^</span>\n<span class=\"w\">    </span>    <span class=\"s2\">&quot;astype&quot;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"pm\">^^^^^^^^^</span>\n<span class=\"w\">    </span><span class=\"o\">...&lt;</span><span class=\"mi\">3</span> <span class=\"n\">lines</span><span class=\"o\">&gt;...</span>\n<span class=\"w\">    </span>    <span class=\"n\">using_cow</span><span class=\"o\">=</span><span class=\"n\">using_copy_on_write</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"pm\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"pm\">^</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/pandas/core/internals/managers.py&quot;</span>, line <span class=\"m\">363</span>, in <span class=\"n\">apply</span>\n<span class=\"w\">    </span><span class=\"n\">applied</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/pandas/core/internals/blocks.py&quot;</span>, line <span class=\"m\">784</span>, in <span class=\"n\">astype</span>\n<span class=\"w\">    </span><span class=\"n\">new_values</span> <span class=\"o\">=</span> <span class=\"n\">astype_array_safe</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"o\">=</span><span class=\"n\">copy</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"n\">errors</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/pandas/core/dtypes/astype.py&quot;</span>, line <span class=\"m\">237</span>, in <span class=\"n\">astype_array_safe</span>\n<span class=\"w\">    </span><span class=\"n\">new_values</span> <span class=\"o\">=</span> <span class=\"n\">astype_array</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"o\">=</span><span class=\"n\">copy</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/pandas/core/dtypes/astype.py&quot;</span>, line <span class=\"m\">182</span>, in <span class=\"n\">astype_array</span>\n<span class=\"w\">    </span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">_astype_nansafe</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"o\">=</span><span class=\"n\">copy</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/pandas/core/dtypes/astype.py&quot;</span>, line <span class=\"m\">80</span>, in <span class=\"n\">_astype_nansafe</span>\n<span class=\"w\">    </span><span class=\"k\">return</span> <span class=\"n\">dtype</span><span class=\"o\">.</span><span class=\"n\">construct_array_type</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">_from_sequence</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">dtype</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"o\">=</span><span class=\"n\">copy</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"pm\">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/pandas/core/arrays/string_.py&quot;</span>, line <span class=\"m\">696</span>, in <span class=\"n\">_from_sequence</span>\n<span class=\"w\">    </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">ensure_string_array</span><span class=\"p\">(</span><span class=\"n\">scalars</span><span class=\"p\">,</span> <span class=\"n\">na_value</span><span class=\"o\">=</span><span class=\"n\">na_value</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"o\">=</span><span class=\"n\">copy</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/.venv/lib/python3.13/site-packages/marimo/_runtime/handlers.py&quot;</span>, line <span class=\"m\">32</span>, in <span class=\"n\">interrupt_handler</span>\n<span class=\"w\">    </span><span class=\"k\">raise</span> <span class=\"n\">MarimoInterrupt</span>\n<span class=\"gr\">KeyboardInterrupt</span>\n</pre></div>\n</span>"
        }
      ]
    },
    {
      "id": "aLJB",
      "code_hash": "040bdc9c087dc4bae3ae816d901444b9",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "nHfw",
      "code_hash": "3f5374ad5557456da756e4213f605a5a",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "xXTn",
      "code_hash": "1ea450fa8eb2949baa6245993dbe13e3",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "AjVT",
      "code_hash": "10587b13954a1af041affb799c426150",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "pHFh",
      "code_hash": "71d67e9c1705cd3669a8ddd5753a68db",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "NCOB",
      "code_hash": "321375fe37546d3d113019fed301fdf8",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "aqbW",
      "code_hash": "13cb517bc3e339627aa214e86d553e94",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "TRpd",
      "code_hash": "29a49146c09ae7469b1bf4a01a2a9706",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "TXez",
      "code_hash": "5f235d75094990bc3f206d60d3339e34",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "dNNg",
      "code_hash": "88c6574cbcd0fb819044a29107a1438e",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "yCnT",
      "code_hash": "9aca35f3664a5d978275fdd243c8a838",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "wlCL",
      "code_hash": "536c0dd380e60b2fd19e5a7da983be25",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "kqZH",
      "code_hash": "3ce1cbb0b97f397e822667257a36b9ed",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "wAgl",
      "code_hash": "8beb2974798820f4678493c7bf147561",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "rEll",
      "code_hash": "9b14ddf55e778481d51b593ad4d8e35d",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "dGlV",
      "code_hash": "7844d4bfb4cf635f6c5f98072a0b5f38",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    },
    {
      "id": "SdmI",
      "code_hash": "10b44c330a142c0ad1e3a9f11f8aa233",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell was interrupted and needs to be re-run",
          "traceback": []
        }
      ],
      "console": []
    }
  ]
}