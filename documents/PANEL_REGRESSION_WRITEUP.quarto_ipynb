{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Indirect Effects of the 2018 US-China Trade War\"\n",
        "author: \"Lukas Alemu\"\n",
        "date: today\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "    toc-location: left\n",
        "    code-fold: true\n",
        "    code-summary: \"Show Code\"\n",
        "  pdf: default\n",
        "jupyter: tariff_trade_analysis\n",
        "bibliography: references.bib\n",
        "---"
      ],
      "id": "ada43d38"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: setup\n",
        "#| include: false\n",
        "\n",
        "import re\n",
        "from typing import Optional\n",
        "\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "import plotly.graph_objects as go\n",
        "import polars as pl\n",
        "import pycountry\n",
        "import pyfixest"
      ],
      "id": "setup",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Introduction\n",
        "\n",
        "This document explores the effects of the 2018 US-China trade war on UK imports from China. We attempt to find evidence for the existence of dumping, and to extrapolate this evidence to identify an implied effect over trade war 2.\n",
        "\n",
        "## Rationale\n",
        "\n",
        "We are essentially trying to connect UK imports from China, to the application of tariffs by the US on Chinese goods in the 2018 trade war. We are attempting to determine if there is a causal link as follows:\n",
        "\n",
        "1.  The US tariffs Chinese goods.\n",
        "2.  In response to a) the increased effective price for US importers & consumers; b) other political pressures, the US demand for Chinese goods falls.\n",
        "3.  Chinese exporters respond by reducing their price and identifying new trading relationships with other countries, including the UK.\n",
        "4.  This results in an increased volume of Chinese goods, at a lower export price, being sent to the UK. This is called 'dumping'.\n",
        "\n",
        "## Data\n",
        "\n",
        "To answer this question, we construct the following dataset:\n",
        "\n",
        "1.  **Bilateral Trade Data**: Trade values (USD) and volumes (SI unit) for bilateral trade between all countries in the world, annually, at the HS6 product level (\\~5000 unique products). Sourced from [CEPII BACI](https://www.cepii.fr/CEPII/en/bdd_modele/bdd_modele_item.asp?id=37).\n",
        "2.  **Tariff Data**: Simple average ad-valorem equivalent tariffs for each product, year, and bilateral pair, including preferential and most-favoured nation rates. Sourced from the [WITS tariff database](https://wits.worldbank.org/).\n",
        "3.  **Exceptional Tariffs**: Specific tariffs from the 2018 US-China trade war, sourced from replication materials for [Hoang and Mix (2025)](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=5101245) and validated against the [US Trade Representative's website](https://ustr.gov/issue-areas/enforcement/section-301-investigations).\n",
        "\n",
        "# Methodology\n",
        "\n",
        "## High-Dimensional Fixed Effect Panel Regression\n",
        "\n",
        "To approach this question, we employ a causal inference assessment. We construct a panel of bilateral trade between a range of countries, where the treatment is the application of tariffs by the US on China for a specific good. Our observed outcome variable is a) the value, b) the volume, or c) the unit value of trade. We include global bilateral trade data to construct robust control groups across two dimensions: a) imports of tariffed products from non-tariffed countries. b) imports from China of non-tariffed products. We remove steel and aluminium products from the sample to control for confounders associated with the broad-based application of US tariffs on those goods globally. We employ high-dimensional fixed effects to control for unobserved heterogeneity and confounding effects.\n",
        "\n",
        "### Specification\n",
        "\n",
        "We fit an OLS fixed-effect panel regression using the pyfixest package. Adapting the equation from [Hoang and Mix (2025)](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=5101245), we specify the following model:\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "L_{i,j,p,t} &= \\beta \\cdot \\left( \\mathbb{I}(i = \\text{Importer}) \\cdot \\mathbb{I}(j = \\text{Exporter}) \\cdot \\mathbb{I}(t \\in [2017,2024]) \\cdot \\text{Tariff}_{p,t}^{\\text{US-China}} \\right) \\\\\n",
        "&\\quad + \\alpha_{j,p,t} + \\lambda_{i,j} + \\varepsilon_{i,j,p,t}\n",
        "\\end{align*}\n",
        "$$\n",
        "\n",
        "Where:\n",
        "\n",
        "-   $L_{i,j,p,t}$: The dependent variable, e.g., $\\log(\\text{Value}_{i,j,p,t})$.\n",
        "-   Indices: $i$ (importer), $j$ (exporter), $p$ (product), $t$ (year).\n",
        "-   $\\beta$: The coefficient of interest, quantifying the impact of the interaction term.\n",
        "-   $\\mathbb{I}(\\cdot)$: An indicator function.\n",
        "-   $\\text{Tariff}_{p,t}^{\\text{US-China}}$: The US-China tariff rate for product $p$ in year $t$.\n",
        "-   Fixed Effects: $\\alpha_{j,p,t}$ (importer-product-year) and $\\lambda_{i,j}$ (importer-exporter) control for unobserved heterogeneity.\n",
        "-   $\\varepsilon_{i,j,p,t}$: The idiosyncratic error term.\n",
        "\n",
        "Following standard practice, we use heteroskedasticity-robust standard errors.\n",
        "\n",
        "### Interpretation\n",
        "\n",
        "The coefficient $\\beta$ quantifies the estimated percentage change in the outcome variable (e.g., import value) for the specified importer-exporter pair in response to a one percentage point increase in the US-China tariff.\n",
        "\n",
        "## Further Considerations\n",
        "\n",
        "It is important to note that the policy response of individual countries to the US tariffs on China is endogenous. Third countries exhibited a wide-ranging willingness to absorb deflected exports from China. See [this paper for more](https://cepr.org/voxeu/columns/redirecting-chinese-exports-us-evidence-trade-deflection-first-us-china-trade-war). *\"There is huge variation across importing nations in the scale of Chinese trade deflection and in their appetite for absorbing extra imports without taking defensive action.\"*\n",
        "\n",
        "# Results\n",
        "\n",
        "Summarising - we do not identify a clear case of trade diversion from China to the UK, particularly as compared to the rest of the world, as a result of the 2018 US-China trade war. We do not find evidence to reject the hypothesis that the aggregate cross-elasticity of UK imports from China to US tariffs on those goods was significantly different from zero. If any effect exists, it is small and hidden at the aggregate level. The rest of this section is structured as follows:\n",
        "\n",
        "1.  **US Imports from China**: We identify the direct impact of US tariffs on its own imports from China. This serves as a baseline and validates our methodology.\n",
        "2.  **RoW Imports from China**: We compare this against the impact on the Rest of the World (RoW).\n",
        "3.  **UK Imports from China**: We look at the specific impact on UK imports.\n",
        "4.  **Individual Country Effects**: We examine countries that exhibited significant trade diversion.\n",
        "5.  **Conclusion**: We discuss what can be applied to the current trade war, discussing limitations and conditioning on policy responses."
      ],
      "id": "0133f9f7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: functions\n",
        "#| code-summary: Function Definitions\n",
        "\n",
        "def run_direct_effect_regression(\n",
        "    data: pl.LazyFrame,\n",
        "    interaction_term_name: str,\n",
        "    interaction_importers: list[str],\n",
        "    interaction_exporters: list[str],\n",
        "    year_range: list[str],\n",
        "    formula: str,\n",
        "    vcov: Optional[str | dict] = \"hetero\",\n",
        "    filter_expression: Optional[pl.Expr] = None,\n",
        "):\n",
        "    USA_CC = \"840\"\n",
        "    CHINA_CC = \"156\"\n",
        "\n",
        "    try:\n",
        "        dependent_var_str = formula.split(\"~\")[0].strip()\n",
        "        dependent_var_col = re.findall(r\"\\b\\w+\\b\", dependent_var_str)[-1]\n",
        "    except IndexError:\n",
        "        raise ValueError(f\"Could not parse dependent variable from formula: {formula}\")\n",
        "\n",
        "    tariff_expr = (\n",
        "        pl.col(\"average_tariff_official\")\n",
        "        .filter((pl.col(\"partner_country\") == USA_CC) & (pl.col(\"reporter_country\") == CHINA_CC))\n",
        "        .mean()\n",
        "        .over([\"year\", \"product_code\"])\n",
        "        .alias(\"tariff_us_china\")\n",
        "    )\n",
        "\n",
        "    input_lf = data.with_columns(\n",
        "        pl.col(\"partner_country\").alias(\"importer\"),\n",
        "        pl.col(\"reporter_country\").alias(\"exporter\"),\n",
        "        tariff_expr,\n",
        "    ).filter(pl.col(\"year\").is_in(year_range))\n",
        "\n",
        "    interaction_filter = (pl.col(\"importer\").is_in(interaction_importers)) & (pl.col(\"exporter\").is_in(interaction_exporters))\n",
        "\n",
        "    interaction_expressions = [\n",
        "        pl.when(interaction_filter & (pl.col(\"year\") == str(year)))\n",
        "        .then(pl.col(\"tariff_us_china\"))\n",
        "        .otherwise(0.0)\n",
        "        .alias(f\"{interaction_term_name}_{year}\")\n",
        "        for year in year_range\n",
        "    ]\n",
        "\n",
        "    final_lf = input_lf.with_columns(*interaction_expressions)\n",
        "\n",
        "    if filter_expression is not None:\n",
        "        final_lf = final_lf.filter(filter_expression)\n",
        "\n",
        "    clean_df = final_lf.drop_nulls(subset=[dependent_var_col, \"tariff_us_china\"]).collect()\n",
        "\n",
        "    model = pyfixest.feols(fml=formula, data=clean_df, vcov=vcov)\n",
        "    etable = pyfixest.etable(model)\n",
        "    coefplot = model.coefplot(joint=True, plot_backend=\"matplotlib\")\n",
        "\n",
        "    return model, etable, coefplot\n",
        "\n",
        "def get_oil_exporting_countries(lzdf: pl.LazyFrame, oil_export_percentage_threshold: float) -> list[str]:\n",
        "    total_exports = lzdf.group_by(\"reporter_country\").agg(pl.sum(\"value\").alias(\"total_value\"))\n",
        "    oil_exports = lzdf.filter(pl.col(\"product_code\").str.starts_with(\"27\")).group_by(\"reporter_country\").agg(pl.sum(\"value\").alias(\"oil_value\"))\n",
        "    summary = total_exports.join(oil_exports, on=\"reporter_country\", how=\"left\").with_columns(pl.col(\"oil_value\").fill_null(0.0))\n",
        "    summary = summary.with_columns(((pl.col(\"oil_value\") / pl.col(\"total_value\")) * 100).alias(\"oil_export_percentage\"))\n",
        "    filtered_countries = summary.filter(pl.col(\"oil_export_percentage\") > oil_export_percentage_threshold)\n",
        "    return filtered_countries.collect()[\"reporter_country\"].to_list()\n",
        "\n",
        "def prepare_analysis_data(\n",
        "    source_lf: pl.LazyFrame,\n",
        "    top_n: int | None = None,\n",
        "    selection_year: str | None = None,\n",
        "    year_range_to_keep: list[str] | None = None,\n",
        "    selection_method: str = \"total_trade\",\n",
        "    oil_export_threshold: float | None = 50.0,\n",
        "    countries_to_exclude: list[str] | None = None,\n",
        "    countries_to_include: list[str] | None = None,\n",
        "    product_codes_to_exclude: list[str] | None = None,\n",
        ") -> pl.LazyFrame:\n",
        "    if countries_to_include and (top_n or selection_year):\n",
        "        raise ValueError(\"'countries_to_include' cannot be used with 'top_n' or 'selection_year'.\")\n",
        "    if not countries_to_include and not (top_n and selection_year):\n",
        "        raise ValueError(\"Either 'countries_to_include' or both 'top_n' and 'selection_year' must be provided.\")\n",
        "\n",
        "    lf = source_lf\n",
        "\n",
        "    if product_codes_to_exclude:\n",
        "        exclusion_expr = pl.any_horizontal(pl.col(\"product_code\").str.starts_with(code) for code in product_codes_to_exclude)\n",
        "        lf = lf.filter(~exclusion_expr)\n",
        "\n",
        "    if oil_export_threshold is not None:\n",
        "        oil_countries = get_oil_exporting_countries(lf, oil_export_threshold)\n",
        "        lf = lf.filter(~pl.col(\"reporter_country\").is_in(oil_countries))\n",
        "\n",
        "    if countries_to_include:\n",
        "        top_countries_list = countries_to_include\n",
        "    else:\n",
        "        trade_in_year_lf = lf.filter(pl.col(\"year\") == selection_year)\n",
        "        if selection_method == \"importers\":\n",
        "            top_countries_df = (\n",
        "                trade_in_year_lf.group_by(\"partner_country\")\n",
        "                .agg(pl.sum(\"value\").alias(\"import_value\"))\n",
        "                .sort(\"import_value\", descending=True)\n",
        "                .head(top_n)\n",
        "                .collect()\n",
        "            )\n",
        "            top_countries_list = top_countries_df[\"partner_country\"].to_list()\n",
        "        elif selection_method == \"total_trade\":\n",
        "            exports_lf = trade_in_year_lf.select(pl.col(\"reporter_country\").alias(\"country\"), \"value\")\n",
        "            imports_lf = trade_in_year_lf.select(pl.col(\"partner_country\").alias(\"country\"), \"value\")\n",
        "            top_countries_df = (\n",
        "                pl.concat([exports_lf, imports_lf])\n",
        "                .group_by(\"country\")\n",
        "                .agg(pl.sum(\"value\").alias(\"total_trade\"))\n",
        "                .sort(\"total_trade\", descending=True)\n",
        "                .head(top_n)\n",
        "                .collect()\n",
        "            )\n",
        "            top_countries_list = top_countries_df[\"country\"].to_list()\n",
        "        else:\n",
        "            raise ValueError(\"selection_method must be 'importers' or 'total_trade'\")\n",
        "\n",
        "    if countries_to_exclude:\n",
        "        top_countries_list = [c for c in top_countries_list if c not in countries_to_exclude]\n",
        "\n",
        "    analysis_lf = lf.filter(pl.col(\"reporter_country\").is_in(top_countries_list) & pl.col(\"partner_country\").is_in(top_countries_list))\n",
        "\n",
        "    if year_range_to_keep:\n",
        "        analysis_lf = analysis_lf.filter(pl.col(\"year\").is_in(year_range_to_keep))\n",
        "\n",
        "    return analysis_lf\n",
        "\n",
        "def plot_elasticity(model, keyword):\n",
        "    coefficients = model.coef()\n",
        "    conf_intervals = model.confint()\n",
        "    interaction_vars = [v for v in coefficients.index if keyword in v]\n",
        "    if not interaction_vars:\n",
        "        raise ValueError(f\"No coefficients found with the keyword: '{keyword}'\")\n",
        "\n",
        "    df = pd.DataFrame({\n",
        "        \"coefficient\": coefficients[interaction_vars] * 100,\n",
        "        \"ci_lower\": conf_intervals.loc[interaction_vars, \"2.5%\"] * 100,\n",
        "        \"ci_upper\": conf_intervals.loc[interaction_vars, \"97.5%\"] * 100,\n",
        "    })\n",
        "    elasticities_mean = df[\"coefficient\"].values\n",
        "    elasticities_ci_lower = df[\"ci_upper\"].values\n",
        "    elasticities_ci_upper = df[\"ci_lower\"].values\n",
        "\n",
        "    fig = go.Figure()\n",
        "    fig.add_trace(go.Scatter(x=df.index, y=elasticities_ci_upper, mode=\"lines\", line=dict(width=0), showlegend=False))\n",
        "    fig.add_trace(go.Scatter(x=df.index, y=elasticities_ci_lower, mode=\"lines\", line=dict(width=0), fillcolor=\"rgba(31, 119, 180, 0.2)\", fill=\"tonexty\", showlegend=False, name=\"95% CI\"))\n",
        "    fig.add_trace(go.Scatter(x=df.index, y=elasticities_mean, mode=\"lines+markers\", name=\"Estimated elasticity\", line=dict(color=\"rgb(31, 119, 180)\"), marker=dict(size=8)))\n",
        "    fig.update_layout(xaxis_title=\"Year Estimate\", yaxis_title=\"Estimated Elasticity\", hovermode=\"x unified\", showlegend=False)\n",
        "    return fig\n",
        "\n",
        "def plot_elasticity_multi(models_dict: dict) -> go.Figure:\n",
        "    fig = go.Figure()\n",
        "    colors = px.colors.qualitative.Plotly\n",
        "    for i, (name, model) in enumerate(models_dict.items()):\n",
        "        color_rgb = colors[i % len(colors)]\n",
        "        color_rgba = color_rgb.replace(\"rgb\", \"rgba\").replace(\")\", \", 0.2)\")\n",
        "        coefficients = model.coef()\n",
        "        conf_intervals = model.confint()\n",
        "        interaction_vars = [v for v in coefficients.index if name in v]\n",
        "        if not interaction_vars:\n",
        "            print(f\"Warning: No coefficients found for '{name}'. Skipping.\")\n",
        "            continue\n",
        "        plot_df = pd.DataFrame({\n",
        "            \"coefficient\": coefficients[interaction_vars],\n",
        "            \"ci_lower\": conf_intervals.loc[interaction_vars, \"2.5%\"],\n",
        "            \"ci_upper\": conf_intervals.loc[interaction_vars, \"97.5%\"],\n",
        "        })\n",
        "        plot_df[\"year\"] = plot_df.index.str.extract(r\"(\\d{4})\").astype(int)\n",
        "        plot_df = plot_df.sort_values(\"year\")\n",
        "        elasticities_mean = abs(plot_df[\"coefficient\"])\n",
        "        elasticities_ci_lower = -plot_df[\"ci_upper\"]\n",
        "        elasticities_ci_upper = -plot_df[\"ci_lower\"]\n",
        "        fig.add_trace(go.Scatter(x=plot_df[\"year\"], y=elasticities_ci_upper, mode=\"lines\", line=dict(width=0), showlegend=False))\n",
        "        fig.add_trace(go.Scatter(x=plot_df[\"year\"], y=elasticities_ci_lower, mode=\"lines\", line=dict(width=0), fillcolor=color_rgba, fill=\"tonexty\", showlegend=False))\n",
        "        fig.add_trace(go.Scatter(x=plot_df[\"year\"], y=elasticities_mean, name=name, mode=\"lines+markers\", line=dict(color=color_rgb), marker=dict(size=8)))\n",
        "    fig.update_layout(xaxis_title=\"Year\", yaxis_title=\"Estimated Elasticity\", hovermode=\"x unified\", legend_title=\"Model\", xaxis=dict(tickmode=\"linear\"))\n",
        "    return fig\n",
        "#| label: data-prep\n",
        "#| code-summary: \"Data Loading and Preparation\"\n",
        "\n",
        "unified_lf = pl.scan_parquet(\n",
        "    \"/Users/lukasalemu/Documents/00. Bank of England/03. MPIL/tariff_trade_analysis/data/final/unified_trade_tariff_partitioned\"\n",
        ")\n",
        "\n",
        "alu_steel_product_codes = [\n",
        "    # Steel Products\n",
        "    \"720610\", \"720690\", \"720711\", \"720712\", \"720719\", \"720720\", \"720810\", \"720825\", \"720826\", \"720827\",\n",
        "    \"720836\", \"720837\", \"720838\", \"720839\", \"720840\", \"720851\", \"720852\", \"720853\", \"720854\", \"720890\",\n",
        "    \"720915\", \"720916\", \"720917\", \"720918\", \"720925\", \"720926\", \"720927\", \"720928\", \"720990\", \"721011\",\n",
        "    \"721012\", \"721020\", \"721030\", \"721041\", \"721049\", \"721050\", \"721061\", \"721069\", \"721070\", \"721090\",\n",
        "    \"721113\", \"721114\", \"721119\", \"721123\", \"721129\", \"721190\", \"721210\", \"721220\", \"721230\", \"721240\",\n",
        "    \"721250\", \"721260\", \"721310\", \"721320\", \"721391\", \"721399\", \"721410\", \"721420\", \"721430\", \"721491\",\n",
        "    \"721499\", \"721510\", \"721550\", \"721590\", \"721610\", \"721621\", \"721622\", \"721631\", \"721632\", \"721633\",\n",
        "    \"721640\", \"721650\", \"721699\", \"721710\", \"721720\", \"721730\", \"721790\", \"721810\", \"721891\", \"721899\",\n",
        "    \"721911\", \"721912\", \"721913\", \"721914\", \"721921\", \"721922\", \"721923\", \"721924\", \"721931\", \"721932\",\n",
        "    \"721933\", \"721934\", \"721935\", \"721990\", \"722011\", \"722012\", \"722020\", \"722090\", \"722100\", \"722211\",\n",
        "    \"722219\", \"722220\", \"722230\", \"722240\", \"722300\", \"722410\", \"722490\", \"722511\", \"722519\", \"722530\",\n",
        "    \"722540\", \"722550\", \"722591\", \"722592\", \"722599\", \"722611\", \"722619\", \"722620\", \"722691\", \"722692\",\n",
        "    \"722699\", \"722710\", \"722720\", \"722790\", \"722810\", \"722820\", \"722830\", \"722840\", \"722850\", \"722860\",\n",
        "    \"722870\", \"722880\", \"722920\", \"722990\", \"730110\", \"730210\", \"730240\", \"730290\", \"730411\", \"730419\",\n",
        "    \"730422\", \"730423\", \"730424\", \"730429\", \"730431\", \"730439\", \"730441\", \"730449\", \"730451\", \"730459\",\n",
        "    \"730490\", \"730511\", \"730512\", \"730519\", \"730520\", \"730531\", \"730539\", \"730590\", \"730611\", \"730619\",\n",
        "    \"730621\", \"730629\", \"730630\", \"730640\", \"730650\", \"730661\", \"730669\", \"730690\",\n",
        "    # Aluminum Products\n",
        "    \"760110\", \"760120\", \"760410\", \"760421\", \"760429\", \"760511\", \"760519\", \"760521\", \"760529\", \"760611\",\n",
        "    \"760612\", \"760691\", \"760692\", \"760711\", \"760719\", \"760720\", \"760810\", \"760820\", \"760900\",\n",
        "]\n",
        "\n",
        "analysis_lf = prepare_analysis_data(\n",
        "    source_lf=unified_lf,\n",
        "    top_n=40,\n",
        "    selection_year=\"2017\",\n",
        "    year_range_to_keep=[str(y) for y in range(2016, 2024)],\n",
        "    selection_method=\"total_trade\",\n",
        "    oil_export_threshold=50.0,\n",
        "    countries_to_exclude=[\"643\", \"344\"],  # Russia, Hong Kong\n",
        "    product_codes_to_exclude=alu_steel_product_codes,\n",
        ")\n",
        "\n",
        "# RoW Lists\n",
        "all_countries = unified_lf.select(pl.col(\"reporter_country\").unique()).collect()[\"reporter_country\"].to_list()\n",
        "countries_to_remove = [\"826\", \"156\", \"643\", \"344\", \"840\"]  # UK, China, Russia, Hong Kong, USA\n",
        "RoW_list = [item for item in all_countries if item not in countries_to_remove]\n",
        "HM_RoW_list_mini = [\n",
        "    pycountry.countries.search_fuzzy(\"United Kingdom\")[0].numeric,\n",
        "    pycountry.countries.search_fuzzy(\"Brazil\")[0].numeric,\n",
        "    pycountry.countries.search_fuzzy(\"Ireland\")[0].numeric,\n",
        "    pycountry.countries.search_fuzzy(\"Italy\")[0].numeric,\n",
        "    pycountry.countries.search_fuzzy(\"South Africa\")[0].numeric,\n",
        "    pycountry.countries.search_fuzzy(\"Germany\")[0].numeric,\n",
        "    pycountry.countries.search_fuzzy(\"France\")[0].numeric,\n",
        "]"
      ],
      "id": "functions",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 1. The impact on US imports from China\n",
        "\n",
        "We construct three regressions, each targeting a different dependent variable: total bilateral trade value (USD), total quantity (SI units), and unit value (Value/Quantity).\n",
        "\n",
        "### US Imports from China (Value)"
      ],
      "id": "c2bc610b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: us-value-reg\n",
        "#| code-summary: 'Run Regression: US Imports Value'\n",
        "\n",
        "interaction_name = \"USA_from_China\"\n",
        "formula = f\"log(value) ~ {' + '.join(f'{interaction_name}_{y}' for y in range(2017, 2024))} | importer^year^product_code + importer^exporter\"\n",
        "\n",
        "model, etable, plot = run_direct_effect_regression(\n",
        "    data=analysis_lf,\n",
        "    interaction_term_name=interaction_name,\n",
        "    interaction_importers=[\"840\"], # USA\n",
        "    interaction_exporters=[\"156\"], # China\n",
        "    year_range=[str(y) for y in range(2016, 2024)],\n",
        "    formula=formula,\n",
        ")\n",
        "\n",
        "fig_elasticity = plot_elasticity(model, keyword=interaction_name)\n",
        "\n",
        "plot.show()\n",
        "etable"
      ],
      "id": "us-value-reg",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-us-value-plot\n",
        "#| echo: false\n",
        "#| fig-cap: Estimated elasticity of US import value from China.\n",
        "\n",
        "fig_elasticity.show()"
      ],
      "id": "fig-us-value-plot",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "As expected, the coefficient on the interaction term is negative, indicating that US imports from China of tariffed goods fell in response to the tariffs. The estimated elasticity is around -0.9% in 2019, suggesting a 1 percentage point increase in the tariff rate leads to a 0.9% decrease in the value of US imports from China of those goods. This aligns with our priors and comparable literature. We see significant changes in the parameter over subsequent years. The magnitude of the shift and its consistency across countries (as shown later) suggests that the fixed effects may not be fully absorbing the effects of the COVID-19 pandemic. We therefore treat results from 2020 onwards with caution.\n",
        "\n",
        "### US Imports from China (Quantity)"
      ],
      "id": "ecaaec72"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: us-quantity-reg\n",
        "#| code-summary: 'Run Regression: US Imports Quantity'\n",
        "\n",
        "interaction_name = \"USA_from_China\"\n",
        "formula = f\"log(quantity) ~ {' + '.join(f'{interaction_name}_{y}' for y in range(2017, 2024))} | importer^year^product_code + importer^exporter\"\n",
        "\n",
        "model_q, etable_q, plot_q = run_direct_effect_regression(\n",
        "    data=analysis_lf,\n",
        "    interaction_term_name=interaction_name,\n",
        "    interaction_importers=[\"840\"], # USA\n",
        "    interaction_exporters=[\"156\"], # China\n",
        "    year_range=[str(y) for y in range(2016, 2024)],\n",
        "    formula=formula,\n",
        ")\n",
        "fig_elasticity_q = plot_elasticity(model_q, keyword=interaction_name)\n",
        "plot_q.show()\n",
        "etable_q"
      ],
      "id": "us-quantity-reg",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-us-quantity-plot\n",
        "#| echo: false\n",
        "#| fig-cap: Estimated elasticity of US import quantity from China.\n",
        "\n",
        "fig_elasticity_q.show()"
      ],
      "id": "fig-us-quantity-plot",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The effect on total traded quantities is similar to that on total traded value.\n",
        "\n",
        "### US Imports from China (Unit Value)"
      ],
      "id": "5af83182"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: us-price-reg\n",
        "#| code-summary: 'Run Regression: US Imports Unit Value'\n",
        "\n",
        "interaction_name = \"USA_from_China\"\n",
        "formula = f\"log(unit_value) ~ {' + '.join(f'{interaction_name}_{y}' for y in range(2017, 2024))} | importer^year^product_code + importer^exporter\"\n",
        "\n",
        "model_p, etable_p, plot_p = run_direct_effect_regression(\n",
        "    data=analysis_lf,\n",
        "    interaction_term_name=interaction_name,\n",
        "    interaction_importers=[\"840\"], # USA\n",
        "    interaction_exporters=[\"156\"], # China\n",
        "    year_range=[str(y) for y in range(2016, 2024)],\n",
        "    formula=formula,\n",
        ")\n",
        "fig_elasticity_p = plot_elasticity(model_p, keyword=interaction_name)\n",
        "plot_p.show()\n",
        "etable_p"
      ],
      "id": "us-price-reg",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-us-price-plot\n",
        "#| echo: false\n",
        "#| fig-cap: Estimated elasticity of US import unit value from China.\n",
        "\n",
        "fig_elasticity_p.show()"
      ],
      "id": "fig-us-price-plot",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "A-priori, we would not expect a large price response, as other research has concluded that Chinese exporters did not absorb the cost of tariffs. The positive coefficient in 2019 is interesting, suggesting prices may have increased at the margin, possibly due to compositional effects within the HS6 product categories.\n",
        "\n",
        "## 2. The impact on Chinese exports to the RoW\n",
        "\n",
        "We repeat the exercise, targeting the Rest of the World (RoW), defined as our sample of 40 countries minus the US, China, and UK. A-priori, we hypothesise an increase in volume and a decrease in unit price for RoW imports from China.\n",
        "\n",
        "### RoW Imports from China (Value)"
      ],
      "id": "bad52426"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: row-value-reg\n",
        "#| code-summary: 'Run Regression: RoW Imports Value'\n",
        "\n",
        "interaction_name = \"RoW_from_China\"\n",
        "formula = f\"log(value) ~ {' + '.join(f'{interaction_name}_{y}' for y in range(2017, 2024))} | importer^year^product_code + importer^exporter\"\n",
        "\n",
        "model_rw, etable_rw, _ = run_direct_effect_regression(\n",
        "    data=analysis_lf,\n",
        "    interaction_term_name=interaction_name,\n",
        "    interaction_importers=RoW_list,\n",
        "    interaction_exporters=[\"156\"], # China\n",
        "    year_range=[str(y) for y in range(2016, 2024)],\n",
        "    formula=formula,\n",
        ")\n",
        "fig_elasticity_rw = plot_elasticity(model_rw, keyword=interaction_name)\n",
        "etable_rw"
      ],
      "id": "row-value-reg",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-row-value-plot\n",
        "#| echo: false\n",
        "#| fig-cap: Estimated elasticity of RoW import value from China.\n",
        "\n",
        "fig_elasticity_rw.show()"
      ],
      "id": "fig-row-value-plot",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### RoW Imports from China (Quantity)"
      ],
      "id": "233dcdf2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: row-quantity-reg\n",
        "#| code-summary: 'Run Regression: RoW Imports Quantity'\n",
        "\n",
        "interaction_name = \"RoW_from_China\"\n",
        "formula = f\"log(quantity) ~ {' + '.join(f'{interaction_name}_{y}' for y in range(2017, 2024))} | importer^year^product_code + importer^exporter\"\n",
        "\n",
        "model_rwq, etable_rwq, _ = run_direct_effect_regression(\n",
        "    data=analysis_lf,\n",
        "    interaction_term_name=interaction_name,\n",
        "    interaction_importers=RoW_list,\n",
        "    interaction_exporters=[\"156\"], # China\n",
        "    year_range=[str(y) for y in range(2016, 2024)],\n",
        "    formula=formula,\n",
        ")\n",
        "fig_elasticity_rwq = plot_elasticity(model_rwq, keyword=interaction_name)\n",
        "etable_rwq"
      ],
      "id": "row-quantity-reg",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-row-quantity-plot\n",
        "#| echo: false\n",
        "#| fig-cap: Estimated elasticity of RoW import quantity from China.\n",
        "\n",
        "fig_elasticity_rwq.show()"
      ],
      "id": "fig-row-quantity-plot",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### RoW Imports from China (Unit Value)"
      ],
      "id": "0ffd5df5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: row-price-reg\n",
        "#| code-summary: 'Run Regression: RoW Imports Unit Value'\n",
        "\n",
        "interaction_name = \"RoW_from_China\"\n",
        "formula = f\"log(unit_value) ~ {' + '.join(f'{interaction_name}_{y}' for y in range(2017, 2024))} | importer^year^product_code + importer^exporter\"\n",
        "\n",
        "model_rwp, etable_rwp, _ = run_direct_effect_regression(\n",
        "    data=analysis_lf,\n",
        "    interaction_term_name=interaction_name,\n",
        "    interaction_importers=RoW_list,\n",
        "    interaction_exporters=[\"156\"], # China\n",
        "    year_range=[str(y) for y in range(2016, 2024)],\n",
        "    formula=formula,\n",
        ")\n",
        "fig_elasticity_rwp = plot_elasticity(model_rwp, keyword=interaction_name)\n",
        "etable_rwp"
      ],
      "id": "row-price-reg",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-row-price-plot\n",
        "#| echo: false\n",
        "#| fig-cap: Estimated elasticity of RoW import unit value from China.\n",
        "\n",
        "fig_elasticity_rwp.show()"
      ],
      "id": "fig-row-price-plot",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Taking these results together, we see that outside of an anomalous 2018, prices for RoW imports from China decrease consistently from 2019 onwards, while quantities and values increase. This is broadly consistent with our priors about trade diversion.\n",
        "\n",
        "## 3. The impact on UK imports from China\n",
        "\n",
        "We now turn to our key question, running the same regressions but targeting the UK-China trading relationship.\n",
        "\n",
        "### UK Imports from China (Value)"
      ],
      "id": "4966e1ee"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: uk-value-reg\n",
        "#| code-summary: 'Run Regression: UK Imports Value'\n",
        "\n",
        "interaction_name = \"UK_from_China\"\n",
        "formula = f\"log(value) ~ {' + '.join(f'{interaction_name}_{y}' for y in range(2017, 2024))} | importer^year^product_code + importer^exporter\"\n",
        "\n",
        "model_uk, etable_uk, _ = run_direct_effect_regression(\n",
        "    data=analysis_lf,\n",
        "    interaction_term_name=interaction_name,\n",
        "    interaction_importers=[\"826\"], # UK\n",
        "    interaction_exporters=[\"156\"], # China\n",
        "    year_range=[str(y) for y in range(2016, 2024)],\n",
        "    formula=formula,\n",
        ")\n",
        "fig_elasticity_uk = plot_elasticity(model_uk, keyword=interaction_name)\n",
        "etable_uk"
      ],
      "id": "uk-value-reg",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-uk-value-plot\n",
        "#| echo: false\n",
        "#| fig-cap: Estimated elasticity of UK import value from China.\n",
        "\n",
        "fig_elasticity_uk.show()"
      ],
      "id": "fig-uk-value-plot",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### UK Imports from China (Quantity)"
      ],
      "id": "b58e46c4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: uk-quantity-reg\n",
        "#| code-summary: 'Run Regression: UK Imports Quantity'\n",
        "\n",
        "interaction_name = \"UK_from_China\"\n",
        "formula = f\"log(quantity) ~ {' + '.join(f'{interaction_name}_{y}' for y in range(2017, 2024))} | importer^year^product_code + importer^exporter\"\n",
        "\n",
        "model_ukq, etable_ukq, _ = run_direct_effect_regression(\n",
        "    data=analysis_lf,\n",
        "    interaction_term_name=interaction_name,\n",
        "    interaction_importers=[\"826\"], # UK\n",
        "    interaction_exporters=[\"156\"], # China\n",
        "    year_range=[str(y) for y in range(2016, 2024)],\n",
        "    formula=formula,\n",
        ")\n",
        "fig_elasticity_ukq = plot_elasticity(model_ukq, keyword=interaction_name)\n",
        "etable_ukq"
      ],
      "id": "uk-quantity-reg",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-uk-quantity-plot\n",
        "#| echo: false\n",
        "#| fig-cap: Estimated elasticity of UK import quantity from China.\n",
        "\n",
        "fig_elasticity_ukq.show()"
      ],
      "id": "fig-uk-quantity-plot",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### UK Imports from China (Unit Value)"
      ],
      "id": "69a14858"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: uk-price-reg\n",
        "#| code-summary: 'Run Regression: UK Imports Unit Value'\n",
        "\n",
        "interaction_name = \"UK_from_China\"\n",
        "formula = f\"log(unit_value) ~ {' + '.join(f'{interaction_name}_{y}' for y in range(2017, 2024))} | importer^year^product_code + importer^exporter\"\n",
        "\n",
        "model_ukp, etable_ukp, _ = run_direct_effect_regression(\n",
        "    data=analysis_lf,\n",
        "    interaction_term_name=interaction_name,\n",
        "    interaction_importers=[\"826\"], # UK\n",
        "    interaction_exporters=[\"156\"], # China\n",
        "    year_range=[str(y) for y in range(2016, 2024)],\n",
        "    formula=formula,\n",
        ")\n",
        "fig_elasticity_ukp = plot_elasticity(model_ukp, keyword=interaction_name)\n",
        "etable_ukp\n",
        "#| label: fig-uk-price-plot\n",
        "#| echo: false\n",
        "#| fig-cap: \"Estimated elasticity of UK import unit value from China.\"\n",
        "\n",
        "fig_elasticity_ukp.show()"
      ],
      "id": "uk-price-reg",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "It is difficult to justify arguments of significant dumping from China on the UK from this data. The coefficients are mostly statistically insignificant, and there is no clear pattern of price decreases coupled with quantity increases. This is to be expected, given the UK's policy response included subsidies and import restrictions, which would counteract any dumping effect.\n",
        "\n",
        "## 4. Individual Countries within RoW\n",
        "\n",
        "We now run the value regression for a small basket of individual countries to observe the heterogeneity of the effect. The list of countries is:"
      ],
      "id": "aa29615c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "# Note: This requires the HM_RoW_list_mini variable from the data-prep chunk\n",
        "country_names = [pycountry.countries.get(numeric=cc).name for cc in HM_RoW_list_mini]\n",
        "print(\", \".join(country_names) + \".\")\n",
        "#| label: multi-country-reg\n",
        "#| code-summary: \"Run Regressions for Individual Countries\"\n",
        "\n",
        "models_value = {}\n",
        "model_renamer_value = {}\n",
        "\n",
        "for country_code in HM_RoW_list_mini:\n",
        "    country_key = pycountry.countries.get(numeric=country_code).alpha_3\n",
        "    interaction_term_name = f\"{country_key}_from_China\"\n",
        "    formula = f\"log(value) ~ {' + '.join(f'{interaction_term_name}_{y}' for y in range(2017, 2024))} | importer^year^product_code + importer^exporter\"\n",
        "      \n",
        "    model, _, _ = run_direct_effect_regression(\n",
        "        data=analysis_lf,\n",
        "        interaction_term_name=interaction_term_name,\n",
        "        interaction_importers=[country_code],\n",
        "        interaction_exporters=[\"156\"],\n",
        "        year_range=[str(y) for y in range(2016, 2024)],\n",
        "        formula=formula,\n",
        "    )\n",
        "    model_renamer_value[formula] = country_key\n",
        "    models_value[country_key] = model\n",
        "\n",
        "pyfixest.etable(models=models_value.values(), model_heads=models_value.keys())"
      ],
      "id": "7fea4db9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: multi-country-plot\n",
        "#| code-summary: Plot Multi-Country Results\n",
        "#| echo: false\n",
        "#| fig-cap: Heterogeneity of import value elasticity across selected countries.\n",
        "\n",
        "fig_multi_value = plot_elasticity_multi(models_dict=models_value)\n",
        "fig_multi_value.show()"
      ],
      "id": "multi-country-plot",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The results show significant heterogeneity across countries, reinforcing the idea that national policy responses and economic structures heavily mediate the effects of trade diversion."
      ],
      "id": "5850c0f2"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "tariff_trade_analysis",
      "language": "python",
      "display_name": "tariff_trade_analysis",
      "path": "/Users/lukasalemu/Library/Jupyter/kernels/tariff_trade_analysis"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}